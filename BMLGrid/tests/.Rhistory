install.packages("knitr")
install.packages("ggplot2")
?gsub
library(gWidgets)
library(gWidgetstcltk)
grp_name <- ggroup(container = win)
win <- gwindow("Main shown window")
?gwindow
win <- gwindow(title = "Main shown window", name = title, width = 100, height = 100)
grp_name <- ggroup(container = win)
lbl_data_frame_name <- glabel(
"Variable to save data to:",
container = grp_name)
txt_data_frame_name <- gedit("dfr", container = grp_name)
grp_upload <- ggroup(container = win)
btn_upload <- gbutton(
text      = "Upload tab delimited file",
container = grp_upload,
handler   = function(h, ...)
{
# TODO!
}
)
function(h, ...)
{
gfile(
text    = "Upload tab delimited file",
type    = "open",
action  = ifelse(svalue(chk_eurostyle), "read.delim2", "read.delim"),
handler = function(h, ...)
{
tryCatch(
{
data_frame_name <- make.names(svalue(txt_data_frame_name))
the_data <- do.call(h$action, list(h$file))
assign(data_frame_name, the_data, envir = globalenv())
svalue(status_bar) <-
paste(nrow(the_data), "records saved to variable", data_frame_name)
},
error = function(e) svalue(status_bar) <- "Could not upload data"
)
},
filter = list(
"Tab delimited" = list(patterns = c("*.txt","*.dlm","*.tab")),
"All files" = list(patterns = c("*"))
)
)
}
lmwidget <- ggenericwidget(lm)
options('guiToolkit' = 'kcltk')
obj <- gbutton('Hello world', container = gwindow())
r = 100, c = 99, ncars = c(red = 100, blue = 100)
r = 100
c = 100
c = 99
ncars = c(red = 100, blue = 100)
summaryCar = c(r,c,ncars,0)
names(summaryCar) = c("rows","clumns","nocars","velocity")
summaryCar
summaryCar = c(r,c,ncars,0)
names(summaryCar) = c("rows","clumns","redcars","bluecars","velocity")
summaryCar
ncars
ncars['red']
ncars[1]
pos$col = c(rep(1,ncars['red']),rep(2,ncars['blue']))
pos = grid[sample(1:(r*c),sum(ncars)),]
grid = data.frame(x=rep(1:r,each = c),y=1:c)
pos = grid[sample(1:(r*c),sum(ncars)),]
pos$col = c(rep(1,ncars['red']),rep(2,ncars['blue']))
cars = list("summaryCar" = summaryCar, "pos" = pos)
class(cars) = "bml"
return(cars)
createBMLGrid = function(r = 100, c = 99, ncars = c(red = 100, blue = 100)){
summaryCar = c(r,c,ncars,0)
names(summaryCar) = c("rows","clumns","redcars","bluecars","velocity")
grid = data.frame(x=rep(1:r,each = c),y=1:c)
pos = grid[sample(1:(r*c),sum(ncars)),]
pos$col = c(rep(1,ncars['red']),rep(2,ncars['blue']))
cars = list("summaryCar" = summaryCar, "pos" = pos)
class(cars) = "bml"
return(cars)
}
cars = createBMLGrid()
m = cars
grid = matrix(0,m$summaryCar["rows"],m$summaryCar["columns"])
createBMLGrid = function(r = 100, c = 99, ncars = c(red = 100, blue = 100)){
summaryCar = c(r,c,ncars,0)
names(summaryCar) = c("rows","columns","redcars","bluecars","velocity")
grid = data.frame(x=rep(1:r,each = c),y=1:c)
pos = grid[sample(1:(r*c),sum(ncars)),]
pos$col = c(rep(1,ncars['red']),rep(2,ncars['blue']))
cars = list("summaryCar" = summaryCar, "pos" = pos)
class(cars) = "bml"
return(cars)
}
cars = createBMLGrid()
m = cars
grid = matrix(0,m$summaryCar["rows"],m$summaryCar["columns"])
grid[ as.matrix(m$pos[m$pos["col"] == 1 ,c("x","y") ])] = 1
grid[ as.matrix(m$pos[m$pos["col"] == 2 ,c("x","y") ])] = 2
image(grid,col=c("white","red","blue"))
obj <- gbutton("Hello world", container = gwindow())
win <- gwindow(title = "Main shown window", name = title, width = 100, height = 100)
grp_name <- ggroup(container = win)
lbl_data_frame_name <- glabel(
"Variable to save data to:",
container = grp_name)
txt_data_frame_name <- gedit("dfr", container = grp_name)
grp_upload <- ggroup(container = win)
btn_upload <- gbutton(
text      = "Upload tab delimited file",
container = grp_upload,
handler   = function(h, ...)
{
# TODO!
}
)
function(h, ...)
{
gfile(
text    = "Upload tab delimited file",
type    = "open",
action  = ifelse(svalue(chk_eurostyle), "read.delim2", "read.delim"),
handler = function(h, ...)
{
tryCatch(
{
data_frame_name <- make.names(svalue(txt_data_frame_name))
the_data <- do.call(h$action, list(h$file))
assign(data_frame_name, the_data, envir = globalenv())
svalue(status_bar) <-
paste(nrow(the_data), "records saved to variable", data_frame_name)
},
error = function(e) svalue(status_bar) <- "Could not upload data"
)
},
filter = list(
"Tab delimited" = list(patterns = c("*.txt","*.dlm","*.tab")),
"All files" = list(patterns = c("*"))
)
)
}
lmwidget <- ggenericwidget(lm)
library(gWidgets)
library(gWidgetstcltk)
win <- gwindow(title = "Main shown window", name = title, width = 100, height = 100)
createGrid=function(r=100,c=99,p){
grid=matrix(' ',nrow=r,ncol=c)
carPosi=sample(r*c,ceiling(r*c*p))
grid[carPosi]='red'
blueposi=sample(carPosi,ceiling(r*c*p)*0.5)
grid[blueposi]='blue'
class(grid) = c( "BMLGrid", class(grid))
grid
}
a = createGrid(5,5,0.3)
a
grid = a
color = "red"
curPosi=getCurPosi(grid,'red')
getCurPosi=function(grid,color){
matrix=which(grid=='red',arr.ind=TRUE)
curPosi=data.frame(row=matrix[,1],col=matrix[,2],color=color)
curPosi
}
getNextPosi=function(curPosi,color,grid){
if(color=='red'){
col=as.vector(curPosi$col+1)
col[col>ncol(grid)]=1
nextPosi=data.frame(row=curPosi$row,col=col,color=color)
}
if(color=='blue'){
row=as.vector(curPosi$row-1)
row[row==0]=nrow(grid)
nextPosi=data.frame(row=row,col=curPosi$col,color=color)
}
return(nextPosi)
}
grid
getCurPosi
getCurPosi=function(grid,color){
matrix=which(grid=='red',arr.ind=TRUE)
curPosi=data.frame(row=matrix[,1],col=matrix[,2],color=color)
curPosi
}
getNextPosi=function(curPosi,color,grid){
if(color=='red'){
col=as.vector(curPosi$col+1)
col[col>ncol(grid)]=1
nextPosi=data.frame(row=curPosi$row,col=col,color=color)
}
if(color=='blue'){
row=as.vector(curPosi$row-1)
row[row==0]=nrow(grid)
nextPosi=data.frame(row=row,col=curPosi$col,color=color)
}
return(nextPosi)
}
createGrid=function(r=100,c=99,p){
grid=matrix(' ',nrow=r,ncol=c)
carPosi=sample(r*c,ceiling(r*c*p))
grid[carPosi]='red'
blueposi=sample(carPosi,ceiling(r*c*p)*0.5)
grid[blueposi]='blue'
class(grid) = c( "BMLGrid", class(grid))
grid
}
a = createGrid(5,5,0.3)
grid = a
color = "red"
a
curPosi=getCurPosi(grid,'red')
curPosi
nextPosi=getNextPosi(curPosi,'red',grid)
nextPosi
curLoc=cbind(curPosi$row,curPosi$col)
curLoc
nextLoc=cbind(nextPosi$row,nextPosi$col)
w=grid[nextLoc]==' '
w
grid
nextLoc[w,,drop = FALSE]
grid[ nextLoc[w,,drop = FALSE] ]
curPosi$color
curPosi$color[w]
move1=function(grid,color){
curPosi=getCurPosi(grid,'red')
nextPosi=getNextPosi(curPosi,'red',grid)
curLoc=cbind(curPosi$row,curPosi$col)
nextLoc=cbind(nextPosi$row,nextPosi$col)
w=grid[nextLoc]==' '
grid[ nextLoc[w,,drop = FALSE] ] = curPosi$color[w]
grid[ curLoc[w,, drop = FALSE] ] = ' '
return(grid)
}
a
move1(a,color='red')
curPosi$color
unfactor(curPosi$color)
str(curPosi$color)
as.character(curPosi$color)
move1=function(grid,color){
curPosi=getCurPosi(grid,'red')
nextPosi=getNextPosi(curPosi,'red',grid)
curLoc=cbind(curPosi$row,curPosi$col)
nextLoc=cbind(nextPosi$row,nextPosi$col)
w=grid[nextLoc]==' '
grid[ nextLoc[w,,drop = FALSE] ] = as.character(curPosi$color)[w]
grid[ curLoc[w,, drop = FALSE] ] = ' '
return(grid)
}
move1(a,color='red')
a
move1(a,color='blue')
a
move1=function(grid,color){
curPosi=getCurPosi(grid, color)
nextPosi=getNextPosi(curPosi,color,grid)
curLoc=cbind(curPosi$row,curPosi$col)
nextLoc=cbind(nextPosi$row,nextPosi$col)
w=grid[nextLoc]==' '
grid[ nextLoc[w,,drop = FALSE] ] = as.character(curPosi$color)[w]
grid[ curLoc[w,, drop = FALSE] ] = ' '
return(grid)
}
move1(a,color='blue')
a
w=grid[nextLoc]==' '
curPosi=getCurPosi(grid, color)
curPosi
color= "blue"
curPosi=getCurPosi(grid, color)
curPosi
grid
getCurPosi=function(grid,color){
matrix=which(grid==color,arr.ind=TRUE)
curPosi=data.frame(row=matrix[,1],col=matrix[,2],color=color)
curPosi
}
a
move1(a,"blue")
row = 5
col = 5
ncars = c(red = 4, blue=4)
cars_tot = sum(ncars)
cars_tot
cells_tot = row * col
colors = c(rep(1, cells_tot - cars_tot), rep(5, ncars[1]), rep(10, ncars[2]))
colors
move1=function(grid,color){
curPosi=getCurPosi(grid, color)
nextPosi=getNextPosi(curPosi,color,grid)
curLoc=cbind(curPosi$row,curPosi$col)
nextLoc=cbind(nextPosi$row,nextPosi$col)
w=grid[nextLoc]==' '
grid[ nextLoc[w,,drop = FALSE] ] = as.character(curPosi$color)[w]
grid[ curLoc[w,, drop = FALSE] ] = ' '
velocity=length(w[w==TRUE])/length(w)
res = c(grid = grid, velocity = velocity)
return(res)
}
a
move1(a,"red")
move1=function(grid,color){
curPosi=getCurPosi(grid, color)
nextPosi=getNextPosi(curPosi,color,grid)
curLoc=cbind(curPosi$row,curPosi$col)
nextLoc=cbind(nextPosi$row,nextPosi$col)
w=grid[nextLoc]==' '
grid[ nextLoc[w,,drop = FALSE] ] = as.character(curPosi$color)[w]
grid[ curLoc[w,, drop = FALSE] ] = ' '
velocity=length(w[w==TRUE])/length(w)
res = list(grid = grid, velocity = velocity)
return(res)
}
move1(a,"red")
rep(0,5)
runBMLGrid=function(fun,grid, numSteps = 10000){
velocity = rep(0,numSteps)
for(i in 1:numSteps){
if(i%%2!=0){
grid=fun(grid,'blue')
}
if(i%%2==0){
grid=fun(grid,'red')
}
velocity[i] = grid$velocity
grid = grid$grid
}
res = list(grid = grid, velocity = velocity)
return(res)
}
runBMLGrid("move1",a,2)
runBMLGrid(move1,a,2)
runBMLGrid(move1,a,10)
move0=function(grid,color){
numMove = 0
if(color=='red'){
curPosi=which(grid=='red',arr.ind=TRUE)
nextRow=curPosi[,1]
nextCol=curPosi[,2]+1L
nextCol[nextCol>ncol(grid)]=1
for(k in 1:length(nextRow)){
if(grid[nextRow[k],nextCol[k]]==' '){
numMove = numMove + 1
grid[nextRow[k],nextCol[k]]='red'
grid[curPosi[,1][k],curPosi[,2][k]]=' '
}
}
velocity = numMove/length(nextRow)
}
if(color=='blue'){
curPosi=which(grid=='blue',arr.ind=TRUE)
nextRow=curPosi[,1]-1L
nextCol=curPosi[,2]
nextRow[nextRow==0]=nrow(grid)
for(k in 1:length(nextCol)){
if(grid[nextRow[k],nextCol[k]]==' '){
numMove = numMove + 1
grid[nextRow[k],nextCol[k]]='blue'
grid[curPosi[,1][k],curPosi[,2][k]]=' '
}
}
velocity = numMove/length(nextRow)
}
res = list(grid = grid, velocity = velocity)
return(res)
}
runBMLGrid(move0,a,10)
colors
?par
sqrt(10)*(1.379 - 1.2)/0.3277
qt(1.727,9)
?qt
pt(1.727,9)
1- pt(1.727,9)
43.7 - 8*1.4*1.4
1.4/sqrt(28.02)
1.4*8/sqrt(28.02)
(1.4/sqrt(28.02))*sqrt(8*7)
qt(0.95,7)
qt(0.01,7)
qt(0.91,7)
ls()
rm(a,car_tot,cells_tot, col, color,colors,createGrid,curLoc)
ls()
rm(cars_tot,curPosi, getCurPosi,getNextPosi,grid,move0,move1,ncars,nextLoc)
ls()
rm(nextPosi,row,runBMLGrid,w)
library(BMLGrid)
g = createBMLGrid(4,5,0.2)
g
cmoveCars(g,1)
cmoveCars(g,2)
crunBMLGrid(g,1000)
plot(g)
cmoveCars(g,2)
z = cmoveCars(g,2)
plot(z$grid)
z = cmoveCars(z$grid,2)
plot(z$grid)
z = cmoveCars(z$grid,1)
plot(z$grid)
summary(z$grid)
install.packages("devtools")
install.packages("testthat")
setwd("Documents/Project-R/242-3/BMLGrid/BMLGrid")
library(devtools)
library(testthat)
devtools::use_testthat()
install.packages("RUnit")
library(RUnit)
c2f <- function(c) return(9/5 * c + 32)
test.c2f <- function() {
checkEquals(c2f(0), 32)
checkEquals(c2f(10), 50)
checkException(c2f("xx"))
}
test.c2f
test.c2f()
checkEquals(c2f(0), 32)
checkEquals(c2f(10), 50)
checkException(c2f("xx"))
test.c2f <- function() {
checkEquals(c2f(0), 32)
checkEquals(c2f(10), 50)}
test.c2f()
checkException(createBMLGrid(0,1,0.1))
checkException(createBMLGrid(1,1,0))
checkException(createBMLGrid(1,1,1))
r =1
c = 1
ncars = 1
checkException(createBMLGrid(1,1,0.9))
ncars = 0.9
if(length(ncars) == 1 && ncars < 1){
ncars = rep(ceiling(r * c * ncars/2), 2)
names(ncars) = c('red','blue')
}
ncars
a = matrix(c(1:6), 2,3)
b = matrix(c(1:6), 2,3)
checkEquals(a,b)
b = matrix(c(1:6), 3,2)
checkEquals(a,b)
class(a) = 'BML'
a
class(a) = c('BML', class(a))
a
createBMLGrid(-1,2,0.3)
createBMLGrid(-1,-2,0.3)
checkException(createBMLGrid(-1, -2,0.3))
getwd()
ls
setwd("tests")
getwd()
library(BMLGrid)
checkException(createBMLGrid(10, 10 , -0.5 ))
test.createBMLGrid = function(){
#test if row number < 0
checkException(createBMLGrid(r = -1, c = 4, 0.3))
#test if density<0
checkException(createBMLGrid(10, 10 , -0.5 ))
#test if number of cars larger than grid
checkException(createBMLGrid(10, 10, c(red = 50, blue = 51)))
#test if only one kind of cars
checkException(createBMLGrid(10, 10, c(red = 50, blue = 0)))
checkEquals(nrow(createBMLGrid(10,9,0.3)), 10)
checkEquals(sum(createBMLGrid(10,9,c(red = 10, blue = 11)) > 0), 21)
}
test.createBMLGrid()
createBMLGrid(10,10,c(red = 50, blue = 0))
test.createBMLGrid = function(){
#test if row number < 0
checkException(createBMLGrid(r = -1, c = 4, 0.3))
#test if density<0
checkException(createBMLGrid(10, 10 , -0.5 ))
#test if number of cars larger than grid
checkException(createBMLGrid(10, 10, c(red = 50, blue = 51)))
checkEquals(nrow(createBMLGrid(10,9,0.3)), 10)
checkEquals(sum(createBMLGrid(10,9,c(red = 10, blue = 11)) > 0), 21)
}
test.createBMLGrid()
g = matrix(c(0, 1, 0,2,1,0),2,3)
g
class(g) = c('BML', class(g))
g = matrix(c(0, 1, 0,2,1,0),2,3)
class(g) = c('BML', class(g))
redg = matrix(c(1, 1, 0,2,0,0),2,3)
class(g) = c('BML', class(g))
checkEquals(cmoveCars(g,1), redg)
cmoveCars(g,1)
g = matrix(c(0, 1, 0,2,1,0),2,3)
class(g) = c('BML', class(g))
redg = matrix(c(1, 1, 0,2,0,0),2,3)
class(redg) = c('BML', class(g))
#check move red cars
checkEquals(cmoveCars(g,1), redg)
checkEquals(cmoveCars(g,1)$grid, redg)
cmoveCars(g,1)$grid
redg
g
